<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Flask应用整合uWsgi,nginx,supervisor]]></title>
    <url>%2F2019%2F09%2F09%2Ftest1%2F</url>
    <content type="text"><![CDATA[本文使用uWsgi,supervisor,nginx来构建一个简单的python web程序，尽可能的模拟实际生产环境中的一些状况。 Flask应用新建一个简单的run.py 123456789101112from flask import Flask, escape, requestapp = Flask(__name__)@app.route('/')def hello(): name = request.args.get("name", "World") return f'Hello, &#123;escape(name)&#125;!'#注意这里一定要将我们自己的启动方式放到main中，否则在uwsgi启动的时候会启动两个端口，uwsgi的socket的端口，和这里的8088端口if __name__ == '__main__': app.run(host='0.0.0.0', port=8088, debug=True) python文件写好了之后，直接执行python run.py 然后在浏览器中访问{yourip}:8088 uwsgiuwsgi是一个web容器，使你的python web app更加健壮，性能更好。相当于tomcat之于java web。你自己写一个servlet的web服务虽然也能跑，但是性能肯定不好。 当然uwsgi的好处还有很多，用途也有很多，具体可以参考官网 安装uwsgi依赖pip install uwsgi，这里需要注意，如果你是用虚环境启动的web服务，那么需要将uwsgi安装到虚环境中，这里建议在线上或者测试环境部署的时候都使用虚环境，python3.5之后可以通过自带的命令建虚环境python3 -m venv myenv，然后就会帮你把虚环境建好，到myenv/bin下面执行你的Python或者pip操作。 supervisorsupervisor是一个进程控制系统，我们可以通过sueprvisor启动我们的后端服务，这样一旦后端服务挂掉了，supervisor就会再次将服务启动起来，不至于长时间影响线上的服务。这里我们使用的时候并没有开启web端，更多详细操作和配置可以在官网了解 安装yum install supervisor 配置supervisor123456789101112131415161718192021222324252627282930313233343536373839404142434445; Sample supervisor config file.[unix_http_server]file=/var/run/supervisor/supervisor.sock ; (the path to the socket file);chmod=0700 ; sockef file mode (default 0700);chown=nobody:nogroup ; socket file uid:gid owner;username=user ; (default is no username (open server));password=123 ; (default is no password (open server));[inet_http_server] ; inet (TCP) server disabled by default;port=127.0.0.1:9001 ; (ip_address:port specifier, *:port for all iface);username=user ; (default is no username (open server));password=123 ; (default is no password (open server))[supervisord]logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)logfile_maxbytes=50MB ; (max main logfile bytes b4 rotation;default 50MB)logfile_backups=10 ; (num of main logfile rotation backups;default 10)loglevel=info ; (log level;default info; others: debug,warn,trace)pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)nodaemon=false ; (start in foreground if true;default false)minfds=1024 ; (min. avail startup file descriptors;default 1024)minprocs=200 ; (min. avail process descriptors;default 200);umask=022 ; (process file creation umask;default 022);user=chrism ; (default is current user, required if root);identifier=supervisor ; (supervisord identifier, default is &apos;supervisor&apos;);directory=/tmp ; (default is not to cd during start);nocleanup=true ; (don&apos;t clean up tempfiles at start;default false);childlogdir=/tmp ; (&apos;AUTO&apos; child log dir, default $TEMP);environment=KEY=value ; (key value pairs to add to environment);strip_ansi=false ; (strip ansi escape codes in logs; def. false); the below section must remain in the config file for RPC; (supervisorctl/web interface) to work, additional interfaces may be; added by defining them in separate rpcinterface: sections[rpcinterface:supervisor]supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface[supervisorctl]serverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL for a unix socket;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket;username=chris ; should be same as http_username if set;password=123 ; should be same as http_password if set;prompt=mysupervisor ; cmd line prompt (default &quot;supervisor&quot;);history_file=~/.sc_history ; use readline history if available 注意要注释掉unix_http_server中的username和password这些配置，否则在启动应用的时候会要求你配置用户名和密码。这里我们也注掉了不需要的url服务。 添加应用配置安装完成之后，可以将我们的配置添加到/etc/supervisord.d目录中 新建文件example.ini 1234567891011[program:example]command=/root/flask_web_app/bin/uwsgi --socket 127.0.0.1:3032 --plugin python --wsgi-file run.py --callable app -H /root/flask_web_appdirectory=/root/flask_web_app/example_appuser=rootautostart=trueautorestart=truestartretries=1stdout_logfile=/root/logs/supervisor_out1.logstderr_logfile=/root/logs/supervisor_err1.log command是程序的启动命令，要注意，这里不要将启动命令放到一个nohup的脚本中，会导致supervisor无法监控他的状态，因为nohup启的是另外一个进程，而supervisor监控的是nohup的进程。 uwsgi命令参数说明： /root/flask_web_app/bin/uwsgi 是虚环境中uwsgi的路径 --socket 127.0.0.1:3032 表示建立连接的端口 --wsgi-file run.py 启动脚本的名字 --callable app 这里的app和你在run.py中定义的app = Flask(__name__)保持一致 -H /root/flask_web_app 这里是指定虚环境的地址，这个很重要，一定要指定到虚环境的地址，否则在启动的时候是无法在你本机的python环境中找到你需要的一些依赖的 启动服务应用配置完成之后，就可以启动我们的supervisor服务了 service supervisord start默认会加载/etc/supervisor.conf的配置文件启动supervisor 启动完成之后，查看我们应用的状态 123456supervisorctl status all #查看状态supervisorctl start examplesupervisorctl restart examplesupervisorctl stop examplesupervisorctl update # 更新新的配置文件到supervisorsupervisorctl reload # 重新启动配置中的所有程序 running状态就表示我们的服务是正常启动的。 nginx 配置nginx 安装yum install nginx nginx配置可以选择直接在vi /etc/nginx/nginx.conf修改，也可以在/etc/nginx/nginx.d/目录中添加配置文件 这里我们直接在nginx.conf文件中做修改 123456789101112131415161718192021server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; include uwsgi_params; uwsgi_pass 127.0.0.1:3031; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; 这里我们改动的位置只有location /里面的配置，注意这里的3031端口要和你启动的uwsgi的应用端口保持一致，如果服务器有多个web服务，可以添加多个server到nginx.conf中 启动nginx1service nginx start 现在我们直接在浏览器输入服务端的地址就能访问到我们的服务端了]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>nginx</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
